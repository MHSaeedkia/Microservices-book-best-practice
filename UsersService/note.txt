redundancy : افزونگی 
susceptible :‌ مستعد 
seeks : به دنبال 
breakdown : درهم شکستن 
encountered : مواجه شدن 
completion : تکمیل
unsatisfactory : نامطلوب
insignificant : ناچیز 
Chaos : آشوب 
observe : رعایت
segregating : جدا سازی
imminent :‌قریب الوقوع
sloppy : نا مرتب
glitches :‌اشکالات
gateways : دروازه
widespread :‌ به طور گسترده
exhaustion :‌ فرسودگی
collateral :‌وسیغه
prominence :‌برجستگی
resilient :‌ارتجاعی
tolerant :‌احتمالی
demonstrated : نشان داده شده
instructive : اموزنده
departing :‌ در حال عظیمت 
rarer :‌ نادر 
lack : عدم 
consolidation : تثبیت 
controversial :‌ بحث بر انگیز 
doubt :‌ شک 
impression : احساس ، عقیده ، گمان
terrain :‌زمین 
outlined :‌ مشخض شده است 
carried out : انجام شده است 
investment : سرمایه گزاری
catastrophic :‌ فاجعه بار
ambiguities :‌ ابهامات
aggregated ‌:‌ تجمیع شده 
laborious :‌ بر زحمت 
played :‌ترجیحا
venturing : جسورانه 
obtained :‌به دست امده
insane :‌مجنون 
desperate :‌مصتصل
gradual :‌تدریجی
Exposing : افشا گری
instantiate :‌ فراخانی کردن 
prescribing : تجویز 
precisely : دقیقا
peculiar :‌ عجیب و قریب
Misconceptions : باور غلط
Regarding : با توجه
evolution : سیر تکاملی 
Segregation : تفکیک
Consolidating : تحکیم
myriad : بیشمار 
deposited : سپرده شده 
involve : درگیرکردن
enormous : عظیم 
tailored : طراحی شده است 
assessing : ارزیابی 
caution : احتیاط
facilitate : تسهیل 
indispensable :‌ ضروری
undertaking : تعهد
agility : چابکی 
Precisely : دقیقا
inadequate :‌ ناکافی 
comprise :‌ شامل میشود 
pertinent : مربوط
renowned :‌ مشهور
reputation :‌ شهرت 
retractions :‌پسرفت 
tier :‌ردیف 
paramount : برترین 
peculiarities :‌ ویژگی های خاص
imperative :‌ ضروری










Shared Data Design Pattern : 
This pattern is very controversial pattern when we talk about microservices. However, it is a temporary pattern for legacy projects that you can implement in a transitioning state. This patterns aims to use the same physical structure for data storage. Shared data design pattern can be used when you have doubt about something like communication around microservices or structure of data.


Command Query Responsibility Segregation : 
CQRS(Common Querry Responsibility Segregation) is a type of design pattern that separates the responsibility of handling commands and queries into different components. CQRS architectural pattern mainly focuses on separating the way of reading and writing the data. It separates the read and update operations on a datastore into two separate models: Queries and Commands, respectively.


Event Sourcing : 
Event sourcing involves capturing all changes to an application’s state as a sequence of events. These events are stored in an event store and can be replayed to rebuild the state of the application at any point in time. In a CQRS architecture, the write model generates events when commands are processed, and the read model subscribes to these events to update its state.


aggregator design pattern :
In Microservices Architecture, we split a large, complex application into small, autonomous, independently deployable services. Therefore, it’s necessary to think about how to collaborate the data returned by each service. In IT industry, aggregator refers to a website or program that collects related items of data and displays them. So, in microservices the Aggregator Design Pattern is a service that receives a request, then makes requests of multiple services, combines the results and responds to the initiating request.

























